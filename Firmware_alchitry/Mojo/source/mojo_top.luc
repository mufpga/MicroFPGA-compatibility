module mojo_top (
   input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    input camera,
    output laser1,
    output laser2,
    output laser3,
    output laser4,
    output laser5,
    output laser6,
    output ttl1,
    output ttl2,
    output ttl3,
    output ttl4,
    output ttl5,
    output ttl6,
    output servo1,
    output servo2,
    output servo3,
    output servo4,
    output servo5,
    output servo6,
    output pwm1,
    output pwm2,
    output pwm3,
    output pwm4,
    output pwm5,
    output pwm6
  ) {
  
  const ADDRESS_VERSION = 100;
  const ERROR_UNKNOW_COMMAND = 38730;
  const NUM_INPUT = 8; // fixed by the board
  const NUM_LASERS = 6;
  const NUM_PWM = 6;
  const NUM_TTL = 6;
  const NUM_SERVOS = 6;
  
  const RESOLUTION_SERVO = 17;
  
  sig rst;  // reset signal
   
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
     
    .rst(rst){
      // the avr_interface module is used to talk to the AVR for access to the USB port and analog pins
      avr_interface avr;
      reg_interface reg;
       
      // adc
      analogreader adc;
            
      // lasers
      lasertrigger l[NUM_LASERS];
      cam_synchro camsync;
      
      dff sequence[NUM_LASERS][16];
      dff duration[NUM_LASERS][16];
      dff mode[NUM_LASERS][3];
      
      // ttls
      dff ttl[NUM_TTL];
      
      // servos
      servo servo_controller[NUM_SERVOS](#MIN_MAX_DIFF(1000), #RESOLUTION(RESOLUTION_SERVO));
      dff position[NUM_SERVOS][RESOLUTION_SERVO];
      dff servo_sig_update[NUM_SERVOS];
      servo_stop servo_sig[NUM_SERVOS];// to shut down the servos 10 sec after every movement
      
      // pwm
      pwm pulsewm[NUM_PWM](#TOP(254),#DIV(9),#WIDTH(8));
      dff dutycycle[NUM_PWM][8];
      dff pwmupdate[NUM_PWM];
    }
  }

  always {
	  led = 8b0;
  
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
     
    // connect inputs of avr
    avr.cclk = cclk;
    avr.spi_ss = spi_ss;
    avr.spi_mosi = spi_mosi;
    avr.spi_sck = spi_sck;
    avr.rx = avr_tx;
    avr.tx_block = avr_rx_busy; // block TX when AVR is busy
     
    // connect outputs of avr
    spi_miso = avr.spi_miso;
    spi_channel = avr.spi_channel;
    avr_rx = avr.tx;
    
    // connect adc to avr avr_interface
    avr.channel = adc.channel;
    adc.sample = avr.sample;
    adc.sample_channel = avr.sample_channel;
    adc.new_sample = avr.new_sample;
    
    // connect reg interface to avr interface
    reg.rx_data = avr.rx_data;
    reg.new_rx_data = avr.new_rx_data;
    avr.tx_data = reg.tx_data;
    avr.new_tx_data = reg.new_tx_data;
    reg.tx_busy = avr.tx_busy;
     
    reg.regIn.drdy = 0;                   // default to not ready
    reg.regIn.data = 32bx;                // don't care 
    
    pwmupdate.d = NUM_PWMx{0};
    servo_sig_update.d = NUM_SERVOSx{0};
     
    if (reg.regOut.new_cmd) {             // new command
      if (reg.regOut.write) {             // if write
        if (reg.regOut.address < NUM_LASERS) {         // Laser modes  
          mode.d[reg.regOut.address] = reg.regOut.data[2:0];     
        } else if (reg.regOut.address < 10+NUM_LASERS) {         // Laser duration
          duration.d[reg.regOut.address-10] = reg.regOut.data[15:0]; 
        } else if (reg.regOut.address < 20+NUM_LASERS) {            // Laser sequence
          sequence.d[reg.regOut.address-20] = reg.regOut.data[15:0];    
        } else if (reg.regOut.address < 30+NUM_TTL){           // TTL
          ttl.d[reg.regOut.address-30] = reg.regOut.data[0];
        } else if (reg.regOut.address < 40+NUM_SERVOS){           // Servo
          position.d[reg.regOut.address-40] = reg.regOut.data[RESOLUTION_SERVO-1:0];
          servo_sig_update.d[reg.regOut.address-40] = 1;
        } else if (reg.regOut.address < 50+NUM_PWM){           // PWM
          dutycycle.d[reg.regOut.address-50] = reg.regOut.data[7:0];
          pwmupdate.d[reg.regOut.address-50] = 1;
        } 
      } else { // read
        led = 10;
         if (reg.regOut.address < NUM_LASERS) {                // Laser modes 
          reg.regIn.data = mode.q[reg.regOut.address];        
          reg.regIn.drdy = 1;    
        } else if (reg.regOut.address < 10+NUM_LASERS) {       // Laser duration
          reg.regIn.data = duration.q[reg.regOut.address-10];        
          reg.regIn.drdy = 1;    
        } else if (reg.regOut.address < 20+NUM_LASERS) {       // Laser sequence
          reg.regIn.data = sequence.q[reg.regOut.address-20];        
          reg.regIn.drdy = 1;       
        } else if (reg.regOut.address < 30+NUM_TTL){           // TTL
          reg.regIn.data = ttl.q[reg.regOut.address-30];        
          reg.regIn.drdy = 1;
        } else if (reg.regOut.address < 40+NUM_SERVOS){        // Servo
          reg.regIn.data = position.q[reg.regOut.address-40];        
          reg.regIn.drdy = 1;
        } else if (reg.regOut.address < 50+NUM_PWM){           // PWM
          reg.regIn.data = dutycycle.q[reg.regOut.address-50];        
          reg.regIn.drdy = 1;
        } else if (reg.regOut.address < 60+NUM_INPUT) {        // Analog input   
          reg.regIn.data = adc.value[reg.regOut.address-60];        
          reg.regIn.drdy = 1;             
        } else if (reg.regOut.address == ADDRESS_VERSION) {    // Version    
          reg.regIn.data = 1; // version number      
          reg.regIn.drdy = 1;             
        } else { // Error
          reg.regIn.data = ERROR_UNKNOW_COMMAND;        
          reg.regIn.drdy = 1; 
        }    
      }
    }
    
    ///////////////// Lasers
    camsync.camera = camera;
    l.trig = NUM_LASERSx{camera};
    l.seq = sequence.q;
    l.mod = mode.q;
    l.dura = duration.q; 
    l.sync = NUM_LASERSx{{camsync.sync}};
    
    laser1 = l.lasersignal[0];
    laser2 = l.lasersignal[1];
    laser3 = l.lasersignal[2];
    laser4 = l.lasersignal[3];
    laser5 = l.lasersignal[4];
    laser6 = l.lasersignal[5];
    
    //////////////// TTLs
    ttl1 = ttl.q[0];
    ttl2 = ttl.q[1];
    ttl3 = ttl.q[2];
    ttl4 = ttl.q[3];
    ttl5 = ttl.q[4];
    ttl6 = ttl.q[5];
    
    //////////////// Servos
    servo_controller.position = position.q;
    servo_sig.update = servo_sig_update.q;
    servo_sig.signal_in = servo_controller.servo;
    servo1 = servo_sig.signal_out[0];
    servo2 = servo_sig.signal_out[1];
    servo3 = servo_sig.signal_out[2];
    servo4 = servo_sig.signal_out[3];
    servo5 = servo_sig.signal_out[4];
    servo6 = servo_sig.signal_out[5];
    
    //////////////// PWM
    pulsewm.update = pwmupdate.q;
    pulsewm.value = dutycycle.q;
    pwm1 = pulsewm.pulse[0];
    pwm2 = pulsewm.pulse[1];
    pwm3 = pulsewm.pulse[2];
    pwm4 = pulsewm.pulse[3];
    pwm5 = pulsewm.pulse[4];
    pwm6 = pulsewm.pulse[5];
  }
}